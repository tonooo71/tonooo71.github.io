{"version":3,"sources":["webpack:///./src/templates/index-page.js"],"names":["IndexPageTemplate","data","pageContext","location","index","siteTitle","site","siteMetadata","title","allPosts","allMarkdownRemark","edges","numPosts","settings","postsPerOnePage","startIndex","endIndex","posts","slice","navigation","style","display","flexWrap","justifyContent","listStyle","padding","to","rel","Math","ceil","length","map","node","key","fields","slug","pageQuery"],"mappings":"6OAyDeA,UAjDW,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACtCC,EAAUF,EAAVE,MACFC,EAAYJ,EAAKK,KAAKC,aAAaC,MACnCC,EAAWR,EAAKS,kBAAkBC,MAClCC,EAAWX,EAAKK,KAAKC,aAAaM,SAASC,gBAC3CC,GAAcX,EAAQ,GAAKQ,EAC3BI,EAAWZ,EAAQQ,EAAWH,EAAWA,EAAWL,EAAQQ,EAC5DK,EAAQR,EAASS,MAAMH,EAAYC,GAEnCG,EACJ,6BACE,wBACEC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGrB,EAAQ,GACP,kBAAC,OAAD,CAAMsB,GAAE,QAAStB,EAAQ,GAAKuB,IAAI,QAAlC,gBAKJ,4BACGvB,IAAUwB,KAAKC,KAAKpB,EAASqB,OAASlB,IACrC,kBAAC,OAAD,CAAMc,GAAE,QAAStB,EAAQ,GAAKuB,IAAI,QAAlC,kBASV,OACE,kBAAC,IAAD,CAAQxB,SAAUA,EAAUK,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAM,cACX,kBAAC,IAAD,MACCW,EACAF,EAAMc,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAAc,kBAAC,IAAD,iBAAUA,EAAV,CAAgBC,IAAKD,EAAKE,OAAOC,WACzDhB,IAOA,IAAMiB,EAAS","file":"component---src-templates-index-page-js-f184d0c3f8ef1c4ea03e.js","sourcesContent":["import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport Post from \"../components/post\";\nimport SEO from \"../components/seo\";\n\nconst IndexPageTemplate = ({ data, pageContext, location }) => {\n  const { index } = pageContext;\n  const siteTitle = data.site.siteMetadata.title;\n  const allPosts = data.allMarkdownRemark.edges;\n  const numPosts = data.site.siteMetadata.settings.postsPerOnePage;\n  const startIndex = (index - 1) * numPosts;\n  const endIndex = index * numPosts > allPosts ? allPosts : index * numPosts;\n  const posts = allPosts.slice(startIndex, endIndex);\n\n  const navigation = (\n    <nav>\n      <ul\n        style={{\n          display: `flex`,\n          flexWrap: `wrap`,\n          justifyContent: `space-between`,\n          listStyle: `none`,\n          padding: 0,\n        }}\n      >\n        <li>\n          {index > 1 && (\n            <Link to={`page${index - 1}`} rel=\"prev\">\n              ← New Posts\n            </Link>\n          )}\n        </li>\n        <li>\n          {index !== Math.ceil(allPosts.length / numPosts) && (\n            <Link to={`page${index + 1}`} rel=\"next\">\n              Old Posts →\n            </Link>\n          )}\n        </li>\n      </ul>\n    </nav>\n  );\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <Bio />\n      {navigation}\n      {posts.map(({ node }) => <Post {...node} key={node.fields.slug} />)}\n      {navigation}\n    </Layout>\n  );\n};\n\nexport default IndexPageTemplate;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        settings {\n          postsPerOnePage\n        }\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MM/DD YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}