{"version":3,"sources":["webpack:///./src/templates/index-page.js","webpack:///./src/components/post.js"],"names":["IndexPageTemplate","data","pageContext","location","index","siteTitle","site","siteMetadata","title","allPosts","allMarkdownRemark","edges","numPosts","settings","postsPerOnePage","startIndex","endIndex","posts","slice","navigation","style","display","flexWrap","justifyContent","listStyle","padding","to","rel","Math","ceil","length","map","node","key","fields","slug","pageQuery","Post","frontmatter","tags","genTags","className","boxShadow","icon","faTag","tag","marginLeft","date","dangerouslySetInnerHTML","__html","description","excerpt"],"mappings":"6OAyDeA,UAjDW,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACtCC,EAAUF,EAAVE,MACFC,EAAYJ,EAAKK,KAAKC,aAAaC,MACnCC,EAAWR,EAAKS,kBAAkBC,MAClCC,EAAWX,EAAKK,KAAKC,aAAaM,SAASC,gBAC3CC,GAAcX,EAAQ,GAAKQ,EAC3BI,EAAWZ,EAAQQ,EAAWH,EAAWA,EAAWL,EAAQQ,EAC5DK,EAAQR,EAASS,MAAMH,EAAYC,GAEnCG,EACJ,6BACE,wBACEC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGrB,EAAQ,GACP,kBAAC,OAAD,CAAMsB,GAAE,QAAStB,EAAQ,GAAKuB,IAAI,QAAlC,kBAKJ,4BACGvB,IAAUwB,KAAKC,KAAKpB,EAASqB,OAASlB,IACrC,kBAAC,OAAD,CAAMc,GAAE,QAAStB,EAAQ,GAAKuB,IAAI,QAAlC,oBASV,OACE,kBAAC,IAAD,CAAQxB,SAAUA,EAAUK,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAO,QAAQJ,IACpB,kBAAC,IAAD,MACCe,EACAF,EAAMc,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAAc,kBAAC,IAAD,iBAAUA,EAAV,CAAgBC,IAAKD,EAAKE,OAAOC,WACzDhB,IAOA,IAAMiB,EAAS,a,kCC3DtB,yEAsCeC,IAhCF,SAAAL,GACX,IAAMxB,EAAQwB,EAAKM,YAAY9B,OAASwB,EAAKE,OAAOC,KAC9CI,EAAOC,YAAQR,EAAKM,YAAYC,MACtC,OACE,6BAASE,UAAU,sBACjB,4BAAQA,UAAU,qBAChB,4BACE,kBAAC,OAAD,CAAMrB,MAAO,CAAEsB,UAAU,QAAWhB,GAAIM,EAAKE,OAAOC,MACjD3B,IAGL,6BACG+B,EAAKT,OAAS,GAAK,kBAAC,IAAD,CAAiBa,KAAMC,MAC1CL,EAAKT,OAAS,GAAKS,EAAKR,KAAI,SAACc,GAAD,OAC3B,kBAAC,OAAD,CAAMzB,MAAO,CAAEsB,UAAU,OAASI,WAAY,QAASpB,GAAE,QAAUmB,EAAV,UACtDA,OAIP,+BAAQb,EAAKM,YAAYS,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQjB,EAAKM,YAAYY,aAAelB,EAAKmB","file":"component---src-templates-index-page-js-5088b47c2fa5abd31420.js","sourcesContent":["import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport Post from \"../components/post\";\nimport SEO from \"../components/seo\";\n\nconst IndexPageTemplate = ({ data, pageContext, location }) => {\n  const { index } = pageContext;\n  const siteTitle = data.site.siteMetadata.title;\n  const allPosts = data.allMarkdownRemark.edges;\n  const numPosts = data.site.siteMetadata.settings.postsPerOnePage;\n  const startIndex = (index - 1) * numPosts;\n  const endIndex = index * numPosts > allPosts ? allPosts : index * numPosts;\n  const posts = allPosts.slice(startIndex, endIndex);\n\n  const navigation = (\n    <nav>\n      <ul\n        style={{\n          display: `flex`,\n          flexWrap: `wrap`,\n          justifyContent: `space-between`,\n          listStyle: `none`,\n          padding: 0,\n        }}\n      >\n        <li>\n          {index > 1 && (\n            <Link to={`page${index - 1}`} rel=\"prev\">\n              ← Newer Posts\n            </Link>\n          )}\n        </li>\n        <li>\n          {index !== Math.ceil(allPosts.length / numPosts) && (\n            <Link to={`page${index + 1}`} rel=\"next\">\n              Older Posts →\n            </Link>\n          )}\n        </li>\n      </ul>\n    </nav>\n  );\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={\"Page \"+index} />\n      <Bio />\n      {navigation}\n      {posts.map(({ node }) => <Post {...node} key={node.fields.slug} />)}\n      {navigation}\n    </Layout>\n  );\n};\n\nexport default IndexPageTemplate;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        settings {\n          postsPerOnePage\n        }\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MM/DD YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { Link, } from \"gatsby\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTag } from '@fortawesome/free-solid-svg-icons';\nimport { genTags, } from \"../utils/format\";\n\nconst Post = node => {\n  const title = node.frontmatter.title || node.fields.slug;\n  const tags = genTags(node.frontmatter.tags);\n  return (\n    <article className=\"index-post-article\">\n      <header className=\"index-post-header\">\n        <h3>\n          <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n            {title}\n          </Link>\n        </h3>\n        <div>\n          {tags.length > 0 && <FontAwesomeIcon icon={faTag} />}\n          {tags.length > 0 && tags.map((tag) => \n            <Link style={{ boxShadow: `none`, marginLeft: \"10px\"}} to={`tags/${tag}/page1`}>\n              {tag}\n            </Link>\n          )}\n        </div>\n        <small>{node.frontmatter.date}</small>\n      </header>\n      <section>\n        <p\n          dangerouslySetInnerHTML={{\n            __html: node.frontmatter.description || node.excerpt,\n          }}\n        />\n      </section>\n    </article>\n  );\n};\n\nexport default Post;\n"],"sourceRoot":""}