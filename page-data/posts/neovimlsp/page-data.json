{"componentChunkName":"component---src-templates-post-template-tsx","path":"/posts/neovimlsp","result":{"data":{"markdownRemark":{"id":"1725fef4-92aa-5c4b-ae7d-47e8f4d497e7","html":"<p>C++の開発環境を Neovim で実現しようとしていろいろ調べていたところ、Neovim に Language Server Protocol(LSP)を導入したという記事をいくつか見つけたのでやってみた。</p>\n<p>LSP の説明は<a href=\"https://qiita.com/atsushieno/items/ce31df9bd88e98eec5c4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">この記事</a>読むとして、概略してコードの補完や参照などがエディタの種類にかかわらずアクセスすることで利用可能になるサーバーという認識で良いのかな。<br>\nこれまでも<code class=\"language-text\">deoplete</code>と言語ごとにプラグインを導入することで補完をすることはできていたんだけど、LSP 使うと大分高速にできる、さらにリンターとしても利用できるみたいなので乗り換えてみようと思った次第です。</p>\n<h3 id=\"languageclient-neovim\" style=\"position:relative;\"><a href=\"#languageclient-neovim\" aria-label=\"languageclient neovim permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LanguageClient-neovim</h3>\n<p>まず Neovim で LSP を利用するために、<a href=\"https://github.com/autozimu/LanguageClient-neovim\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LanguageClient-neovim</a>をインストールします。<br>\n私は dein.vim でプラグイン管理しているので、</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token table class-name\">plugins</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">repo</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">'autozimu/LanguageClient-neovim'</span>\n<span class=\"token key property\">rev</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">'next'</span>\n<span class=\"token key property\">build</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">'bash install.sh'</span></code></pre></div>\n<p>と<code class=\"language-text\">dein.toml</code>に書き込んで Neovim を起動させインストールします。<br>\nLanguageClient-neovim 以外にも LSP のプラグインは<a href=\"https://github.com/prabirshrestha/vim-lsp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vim-lsp</a>とかあるみたいなんだけど、LanguageClient-neovim は<code class=\"language-text\">deoplete</code>で使える!と見たので、よく意味はわかってないんですがこちらを選択しました。<br>\nそして言語ごとのサーバーをインストールし、LanguageClient-neovim で参照することで LSP を利用します。<br>\n利用できるサーバーの一覧は<a href=\"https://langserver.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">こちら</a>のページに載っています。</p>\n<h3 id=\"cc\" style=\"position:relative;\"><a href=\"#cc\" aria-label=\"cc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>C/C++</h3>\n<p>C/C++用のサーバーは<code class=\"language-text\">clangd</code>,<code class=\"language-text\">cquery</code>,<code class=\"language-text\">ccls</code>があるみたいで、<code class=\"language-text\">clangd</code>だけが機能的に他のものに劣っているようなことが先程の一覧ページに書いてあります。<br>\nなので最初は<code class=\"language-text\">cquery</code>を導入しようと思ってたんですが、なんかうまく動かなかったので結局<code class=\"language-text\">clangd</code>使うことにしました。<br>\n<code class=\"language-text\">clangd</code>はもともと<code class=\"language-text\">clang</code>とか<code class=\"language-text\">llvm</code>をインストールしていたので、私の環境では何も追加でインストールせず使えました。<br>\n設定は、</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token table class-name\">plugins</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">repo</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">'autozimu/LanguageClient-neovim'</span>\n<span class=\"token key property\">rev</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">'next'</span>\n<span class=\"token key property\">build</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">'bash install.sh'</span>\n<span class=\"token key property\">hook_add</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">'''\n    set hidden\n    let g:LanguageClient_autoStart = 1\n    let g:LanguageClient_serverCommands = {\n        \\ 'c': ['clangd'],\n        \\ 'cpp': ['clangd'],\n\\ }\n'''</span></code></pre></div>\n<p>と書けば(とりあえずは)動きます。<br>\n動いているかの確認は、適当な C/C++ファイルを開いてコード打って補完候補が出てくるかどうかでできます。<br>\nただ、私の環境だとそもそも LSP が立ち上がっていなかったり、立ち上がっていても<code class=\"language-text\">clangd</code>を呼び出してくれないなどトラブルが頻発しました。<br>\n設定を<code class=\"language-text\">dein.toml</code>の上の方に書いたら直ったんで今は動いてますが、どうして起動しなかったりしたのかは結局よくわからないです。</p>\n<h4 id=\"追記\" style=\"position:relative;\"><a href=\"#%E8%BF%BD%E8%A8%98\" aria-label=\"追記 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>追記</h4>\n<p>これ<code class=\"language-text\">hook_source</code>じゃなくて<code class=\"language-text\">hook_add</code>って書く必要があったぽい、そのせいだったかもしれない。</p>\n<p>設定中の<code class=\"language-text\">let g:LanguageClient_autoStart = 1</code>は LSP を自動起動するというものです。起動していなくても、手動で<code class=\"language-text\">:LanguageClientStart</code>とコマンドに打つことで起動することができます。</p>\n<h3 id=\"python\" style=\"position:relative;\"><a href=\"#python\" aria-label=\"python permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python</h3>\n<p>どうせなので Python 用の LSP も導入します。<br>\n2 つあるようですが、GitHub のスター数的に<a href=\"https://github.com/palantir/python-language-server\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python Language Server</a>を導入すればいいでしょう。<br>\nインストールは<code class=\"language-text\">pip install python-language-server</code>で行います。<br>\nそして<code class=\"language-text\">README.md</code>に書かれてあるとおり、いくつかのプラグインをオプションとして用いることが可能なようです。<br>\n私はこの中からリンターである<code class=\"language-text\">pycodestyle</code>(以前まで<code class=\"language-text\">pep8</code>と呼ばれていたもの)とコードを保存時にフォーマットしてくれる<code class=\"language-text\">yapf</code>を導入しました。<br>\n導入には、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ pip install &#39;python-language-server[pycodestyle]&#39;\n$ pip install &#39;python-language-server[yapf]&#39;</code></pre></div>\n<p>などとすれば良いようです。<br>\nそして LanguageClient-neovim の設定に、</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\">    let g:LanguageClient_serverCommands <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">{</span>\n        \\ <span class=\"token string\">'python'</span>: <span class=\"token punctuation\">[</span><span class=\"token string\">'pyls'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\\ <span class=\"token punctuation\">}</span></code></pre></div>\n<p>を追記すれば動きます。<br>\nおそらくこれでリンターも動くはずなので(まだ確認していないのですが)、<code class=\"language-text\">ale</code>で<code class=\"language-text\">pylint</code>とかを動かしていたのですが、これらを削除しました。<br>\nこんな感じです。まだキーコンフィグ全く設定していないので、そのうち追記するかと思います。</p>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h3>\n<ul>\n<li><a href=\"https://qiita.com/arwtyxouymz0110/items/b09ef1ed7a2f7bf1c5e6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Neovim で C/C++の IDE(っぽい)環境を構築する</a></li>\n<li><a href=\"https://github.com/autozimu/LanguageClient-neovim\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LanguageClient-neovim</a></li>\n<li><a href=\"http://wheson-prog.hatenablog.jp/entry/2018/06/05/141730\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">neovim で LSP(LanguageServerProtocol)を使ってみる</a></li>\n<li><a href=\"https://github.com/palantir/python-language-server\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python Language Server</a></li>\n<li><a href=\"https://qiita.com/kouichi_c/items/5f047ab3a7c64277e97c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Language Server Protocol を使って vim で python 入力補完</a></li>\n</ul>","fields":{"slug":"/posts/neovimlsp","tagSlugs":["/tag/neovim/"]},"frontmatter":{"date":"2018-08-11T15:56:24+09:00","description":"C++の開発環境をNeovimで実現しようとしていろいろ調べていたところ、NeovimにLanguage Server Protocol(LSP)を導入したという記事をいくつか見つけたのでやってみた","tags":["Neovim"],"title":"NeovimでLSPを使う","socialImage":null}}},"pageContext":{"slug":"/posts/neovimlsp"}},"staticQueryHashes":["251939775","401334301","825871152"]}