{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018/180811_neovimlsp/180811_neovimlsp/","result":{"data":{"site":{"siteMetadata":{"title":"RINotes","siteUrl":"https://tonooo71.github.io"}},"markdownRemark":{"id":"e3a4f2dc-c5f8-5030-a6f3-71c4844101d0","excerpt":"C++の開発環境をNeovimで実現しようとしていろいろ調べていたところ、NeovimにLanguage Server Protocol(LSP)を導入したという記事をいくつか見つけたのでやってみた。   LSP…","html":"<p>C++の開発環境をNeovimで実現しようとしていろいろ調べていたところ、NeovimにLanguage Server Protocol(LSP)を導入したという記事をいくつか見つけたのでやってみた。  </p>\n<p>LSPの説明は<a href=\"https://qiita.com/atsushieno/items/ce31df9bd88e98eec5c4\">この記事</a>読むとして、概略してコードの補完や参照などがエディタの種類にかかわらずアクセスすることで利用可能になるサーバーという認識で良いのかな。<br>\nこれまでも<code class=\"language-text\">deoplete</code>と言語ごとにプラグインを導入することで補完をすることはできていたんだけど、LSP使うと大分高速にできる、さらにリンターとしても利用できるみたいなので乗り換えてみようと思った次第です。  </p>\n<h3>LanguageClient-neovim</h3>\n<p>まずNeovimでLSPを利用するために、<a href=\"https://github.com/autozimu/LanguageClient-neovim\">LanguageClient-neovim</a>をインストールします。<br>\n私はdein.vimでプラグイン管理しているので、  </p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token table class-name\">plugins</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">repo</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">'autozimu/LanguageClient-neovim'</span>\n<span class=\"token key property\">rev</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">'next'</span>\n<span class=\"token key property\">build</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">'bash install.sh'</span></code></pre></div>\n<p>と<code class=\"language-text\">dein.toml</code>に書き込んでNeovimを起動させインストールします。<br>\nLanguageClient-neovim以外にもLSPのプラグインは<a href=\"https://github.com/prabirshrestha/vim-lsp\">vim-lsp</a>とかあるみたいなんだけど、LanguageClient-neovimは<code class=\"language-text\">deoplete</code>で使える!と見たので、よく意味はわかってないんですがこちらを選択しました。<br>\nそして言語ごとのサーバーをインストールし、LanguageClient-neovimで参照することでLSPを利用します。<br>\n利用できるサーバーの一覧は<a href=\"https://langserver.org/\">こちら</a>のページに載っています。  </p>\n<h3>C/C++</h3>\n<p>C/C++用のサーバーは<code class=\"language-text\">clangd</code>,<code class=\"language-text\">cquery</code>,<code class=\"language-text\">ccls</code>があるみたいで、<code class=\"language-text\">clangd</code>だけが機能的に他のものに劣っているようなことが先程の一覧ページに書いてあります。<br>\nなので最初は<code class=\"language-text\">cquery</code>を導入しようと思ってたんですが、なんかうまく動かなかったので結局<code class=\"language-text\">clangd</code>使うことにしました。<br>\n<code class=\"language-text\">clangd</code>はもともと<code class=\"language-text\">clang</code>とか<code class=\"language-text\">llvm</code>をインストールしていたので、私の環境では何も追加でインストールせず使えました。<br>\n設定は、</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token table class-name\">plugins</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">repo</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">'autozimu/LanguageClient-neovim'</span>\n<span class=\"token key property\">rev</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">'next'</span>\n<span class=\"token key property\">build</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">'bash install.sh'</span>\n<span class=\"token key property\">hook_add</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">'''\n    set hidden\n    let g:LanguageClient_autoStart = 1\n    let g:LanguageClient_serverCommands = {\n        \\ 'c': ['clangd'],\n        \\ 'cpp': ['clangd'],\n\\ }\n'''</span></code></pre></div>\n<p>と書けば(とりあえずは)動きます。<br>\n動いているかの確認は、適当なC/C++ファイルを開いてコード打って補完候補が出てくるかどうかでできます。<br>\nただ、私の環境だとそもそもLSPが立ち上がっていなかったり、立ち上がっていても<code class=\"language-text\">clangd</code>を呼び出してくれないなどトラブルが頻発しました。<br>\n設定を<code class=\"language-text\">dein.toml</code>の上の方に書いたら直ったんで今は動いてますが、どうして起動しなかったりしたのかは結局よくわからないです。  </p>\n<h4>追記</h4>\n<p>これ<code class=\"language-text\">hook_source</code>じゃなくて<code class=\"language-text\">hook_add</code>って書く必要があったぽい、そのせいだったかもしれない。  </p>\n<p>設定中の<code class=\"language-text\">let g:LanguageClient_autoStart = 1</code>はLSPを自動起動するというものです。起動していなくても、手動で<code class=\"language-text\">:LanguageClientStart</code>とコマンドに打つことで起動することができます。  </p>\n<h3>Python</h3>\n<p>どうせなのでPython用のLSPも導入します。<br>\n2つあるようですが、GitHubのスター数的に<a href=\"https://github.com/palantir/python-language-server\">Python Language Server</a>を導入すればいいでしょう。<br>\nインストールは<code class=\"language-text\">pip install python-language-server</code>で行います。<br>\nそして<code class=\"language-text\">README.md</code>に書かれてあるとおり、いくつかのプラグインをオプションとして用いることが可能なようです。<br>\n私はこの中からリンターである<code class=\"language-text\">pycodestyle</code>(以前まで<code class=\"language-text\">pep8</code>と呼ばれていたもの)とコードを保存時にフォーマットしてくれる<code class=\"language-text\">yapf</code>を導入しました。<br>\n導入には、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ pip install &#39;python-language-server[pycodestyle]&#39;\n$ pip install &#39;python-language-server[yapf]&#39;</code></pre></div>\n<p>などとすれば良いようです。<br>\nそしてLanguageClient-neovimの設定に、</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\">    let g:LanguageClient_serverCommands <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">{</span>\n        \\ <span class=\"token string\">'python'</span>: <span class=\"token punctuation\">[</span><span class=\"token string\">'pyls'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\\ <span class=\"token punctuation\">}</span></code></pre></div>\n<p>を追記すれば動きます。<br>\nおそらくこれでリンターも動くはずなので(まだ確認していないのですが)、<code class=\"language-text\">ale</code>で<code class=\"language-text\">pylint</code>とかを動かしていたのですが、これらを削除しました。<br>\nこんな感じです。まだキーコンフィグ全く設定していないので、そのうち追記するかと思います。  </p>\n<h3>Reference</h3>\n<ul>\n<li><a href=\"https://qiita.com/arwtyxouymz0110/items/b09ef1ed7a2f7bf1c5e6\">NeovimでC/C++のIDE(っぽい)環境を構築する</a></li>\n<li><a href=\"https://github.com/autozimu/LanguageClient-neovim\">LanguageClient-neovim</a></li>\n<li><a href=\"http://wheson-prog.hatenablog.jp/entry/2018/06/05/141730\">neovimでLSP(LanguageServerProtocol)を使ってみる</a></li>\n<li><a href=\"https://github.com/palantir/python-language-server\">Python Language Server</a></li>\n<li><a href=\"https://qiita.com/kouichi_c/items/5f047ab3a7c64277e97c\">Language Server Protocolを使ってvimでpython入力補完</a></li>\n</ul>","frontmatter":{"title":"NeovimでLSPを使う","date":"August 11, 2018","description":"C++の開発環境をNeovimで実現しようとしていろいろ調べていたところ、NeovimにLanguage Server Protocol(LSP)を導入したという記事をいくつか見つけたのでやってみた","tags":"Neovim"}}},"pageContext":{"slug":"/2018/180811_neovimlsp/180811_neovimlsp/","previous":{"fields":{"slug":"/2018/180802_virtualbox_vkms/180802_virtualbox_vkms/"},"frontmatter":{"title":"デュアルブートでVirtualBox","tags":"Linux ArchLinux"}},"next":{"fields":{"slug":"/2018/180831_hugosetting/180831_hugosetting/"},"frontmatter":{"title":"Hugoの設定","tags":"Hugo"}}}}}