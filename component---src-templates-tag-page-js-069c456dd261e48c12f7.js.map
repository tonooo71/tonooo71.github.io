{"version":3,"sources":["webpack:///./src/templates/tag-page.js","webpack:///./src/components/post.js"],"names":["TagPageTemplate","data","pageContext","location","tag","index","siteTitle","site","siteMetadata","title","allPosts","allMarkdownRemark","edges","numPosts","settings","postsPerOnePage","startIndex","endIndex","allTagPosts","filter","post","node","frontmatter","tags","includes","posts","slice","maxIndex","Math","ceil","length","navigation","style","display","flexWrap","justifyContent","listStyle","padding","to","rel","marginTop","rhythm","marginBottom","icon","faTag","marginRight","map","key","fields","slug","pageQuery","Post","genTags","className","boxShadow","marginLeft","date","dangerouslySetInnerHTML","__html","description","excerpt"],"mappings":"mSAuEeA,UA5DS,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACpCC,EAAgBF,EAAhBE,IAAKC,EAAWH,EAAXG,MACPC,EAAYL,EAAKM,KAAKC,aAAaC,MACnCC,EAAWT,EAAKU,kBAAkBC,MAClCC,EAAWZ,EAAKM,KAAKC,aAAaM,SAASC,gBAC3CC,GAAcX,EAAQ,GAAKQ,EAC3BI,EAAWZ,EAAQQ,EAAWH,EAAWA,EAAWL,EAAQQ,EAC5DK,EAAcR,EAASS,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,YAAYC,KAAKC,SAASpB,MAC1EqB,EAAQP,EAAYQ,MAAMV,EAAYC,GACtCU,EAAWC,KAAKC,KAAKX,EAAYY,OAASjB,GAE1CkB,EACJ,6BACE,wBACEC,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACGhC,EAAQ,GACP,kBAAC,OAAD,CAAMiC,GAAE,QAAUlC,EAAV,SAAqBC,EAAQ,GAAKkC,IAAI,QAA9C,kBAKJ,4BACGlC,IAAUsB,GACT,kBAAC,OAAD,CAAMW,GAAE,QAAUlC,EAAV,SAAqBC,EAAQ,GAAKkC,IAAI,QAA9C,oBASV,OACE,kBAAC,IAAD,CAAQpC,SAAUA,EAAUM,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAO,QAAQL,IACpB,kBAAC,IAAD,MACA,wBACE4B,MAAO,CACLQ,UAAWC,YAAO,GAClBC,aAAcD,YAAO,KAGvB,kBAAC,IAAD,CAAiBE,KAAMC,IAAOZ,MAAO,CAACa,YAAa,UANrD,QAOQzC,EAPR,KAOec,EAAYY,OAP3B,WASCC,EACAN,EAAMqB,KAAI,gBAAGzB,EAAH,EAAGA,KAAH,OAAc,kBAAC,IAAD,iBAAUA,EAAV,CAAgB0B,IAAK1B,EAAK2B,OAAOC,WACzDlB,IAOA,IAAMmB,EAAS,a,kCCzEtB,yEAsCeC,IAhCF,SAAA9B,GACX,IAAMZ,EAAQY,EAAKC,YAAYb,OAASY,EAAK2B,OAAOC,KAC9C1B,EAAO6B,YAAQ/B,EAAKC,YAAYC,MACtC,OACE,iCACE,4BAAQ8B,UAAU,qBAChB,4BACE,kBAAC,OAAD,CAAMrB,MAAO,CAAEsB,UAAU,QAAWhB,GAAIjB,EAAK2B,OAAOC,MACjDxC,IAGL,6BACGc,EAAKO,OAAS,GAAK,kBAAC,IAAD,CAAiBa,KAAMC,MAC1CrB,EAAKO,OAAS,GAAKP,EAAKuB,KAAI,SAAC1C,GAAD,OAC3B,kBAAC,OAAD,CAAM4B,MAAO,CAAEsB,UAAU,OAASC,WAAY,QAASjB,GAAE,QAAUlC,EAAV,UACtDA,OAIP,+BAAQiB,EAAKC,YAAYkC,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQrC,EAAKC,YAAYqC,aAAetC,EAAKuC","file":"component---src-templates-tag-page-js-069c456dd261e48c12f7.js","sourcesContent":["import React from \"react\";\nimport { Link, graphql } from \"gatsby\";\nimport { rhythm, scale } from \"../utils/typography\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTag } from '@fortawesome/free-solid-svg-icons';\n\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport Post from \"../components/post\";\nimport SEO from \"../components/seo\";\n\nconst TagPageTemplate = ({ data, pageContext, location }) => {\n  const { tag, index, } = pageContext;\n  const siteTitle = data.site.siteMetadata.title;\n  const allPosts = data.allMarkdownRemark.edges;\n  const numPosts = data.site.siteMetadata.settings.postsPerOnePage;\n  const startIndex = (index - 1) * numPosts;\n  const endIndex = index * numPosts > allPosts ? allPosts : index * numPosts;\n  const allTagPosts = allPosts.filter(post => post.node.frontmatter.tags.includes(tag));\n  const posts = allTagPosts.slice(startIndex, endIndex);\n  const maxIndex = Math.ceil(allTagPosts.length / numPosts);\n\n  const navigation = (\n    <nav>\n      <ul\n        style={{\n          display: `flex`,\n          flexWrap: `wrap`,\n          justifyContent: `space-between`,\n          listStyle: `none`,\n          padding: 0,\n        }}\n      >\n        <li>\n          {index > 1 && (\n            <Link to={`tags/${tag}/page${index - 1}`} rel=\"prev\">\n              ← Newer Posts\n            </Link>\n          )}\n        </li>\n        <li>\n          {index !== maxIndex && (\n            <Link to={`tags/${tag}/page${index + 1}`} rel=\"next\">\n              Older Posts →\n            </Link>\n          )}\n        </li>\n      </ul>\n    </nav>\n  );\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title={\"Tag: \"+tag} />\n      <Bio />\n      <h2\n        style={{\n          marginTop: rhythm(1),\n          marginBottom: rhythm(1),\n        }}\n      >\n        <FontAwesomeIcon icon={faTag} style={{marginRight: \"10px\"}}/>\n        Tag: {tag} ({allTagPosts.length} posts)\n      </h2>\n      {navigation}\n      {posts.map(({ node }) => <Post {...node} key={node.fields.slug} />)}\n      {navigation}\n    </Layout>\n  );\n};\n\nexport default TagPageTemplate;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        settings {\n          postsPerOnePage\n        }\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MM/DD YYYY\")\n            title\n            description\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { Link, } from \"gatsby\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTag } from '@fortawesome/free-solid-svg-icons';\nimport { genTags, } from \"../utils/format\";\n\nconst Post = node => {\n  const title = node.frontmatter.title || node.fields.slug;\n  const tags = genTags(node.frontmatter.tags);\n  return (\n    <article>\n      <header className=\"index-post-header\">\n        <h3>\n          <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n            {title}\n          </Link>\n        </h3>\n        <div>\n          {tags.length > 0 && <FontAwesomeIcon icon={faTag} />}\n          {tags.length > 0 && tags.map((tag) => \n            <Link style={{ boxShadow: `none`, marginLeft: \"10px\"}} to={`tags/${tag}/page1`}>\n              {tag}\n            </Link>\n          )}\n        </div>\n        <small>{node.frontmatter.date}</small>\n      </header>\n      <section>\n        <p\n          dangerouslySetInnerHTML={{\n            __html: node.frontmatter.description || node.excerpt,\n          }}\n        />\n      </section>\n    </article>\n  );\n};\n\nexport default Post;\n"],"sourceRoot":""}